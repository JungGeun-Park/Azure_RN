trigger:
- develop

pool:
  name: APPSEALING

parameters:
- name: APPLE_ID
  type: string
  default: 'puzznic@inka.co.kr'
- name: APP_SPECIFIC_PASSWORD
  type: string
  default: 'qbrz-hmfz-robj-eohm'
- name: TEAM_ID
  type: string
  default: '22X77ENQ2H'
- name: PROVISIONING_PROFILE_NAME
  type: string
  default: 'AppSealing Wildcard Distribution Profile'

steps:
- script: |
    # Check if Node.js and npm are installed, if not, install them
    if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
        echo "Node.js or npm is not installed. Installing Node.js..."
        brew install node
    else
        echo "Node.js and npm are already installed."
    fi

    # Install dependencies for React Native project
    echo "Installing project dependencies..."
    npm install

    # Install CocoaPods for iOS dependencies
    echo "Installing CocoaPods..."
    cd ios && pod install && cd ..
  displayName: 'Setup React Native Environment'

- script: |
    # Increment build number for iOS (Info.plist)
    INFO_PLIST_PATH="ios/YourAppName/Info.plist"
    if [ -f "$INFO_PLIST_PATH" ]; then
        CURRENT_BUILD_NUMBER=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$INFO_PLIST_PATH")
        NEW_BUILD_NUMBER=$((CURRENT_BUILD_NUMBER + 1))
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD_NUMBER" "$INFO_PLIST_PATH"
        echo "Updated iOS build number to $NEW_BUILD_NUMBER."
    else
        echo "Info.plist not found. Skipping iOS build number update."
    fi

    # Increment versionCode for Android (build.gradle)
    GRADLE_FILE="android/app/build.gradle"
    if [ -f "$GRADLE_FILE" ]; then
        CURRENT_VERSION_CODE=$(grep versionCode $GRADLE_FILE | awk '{print $2}')
        NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
        sed -i '' "s/versionCode $CURRENT_VERSION_CODE/versionCode $NEW_VERSION_CODE/" $GRADLE_FILE
        echo "Updated Android versionCode to $NEW_VERSION_CODE."
    else
        echo "build.gradle not found. Skipping Android versionCode update."
    fi
  displayName: 'Increment Build Number'

- script: |
    # Build React Native app for iOS
    echo "Building iOS app..."
    cd ios && xcodebuild \
      -workspace YourAppName.xcworkspace \
      -scheme YourAppName \
      -sdk iphoneos \
      -configuration Release \
      archive \
      -archivePath ../build/YourAppName.xcarchive \
      CODE_SIGN_IDENTITY="Apple Distribution" \
      PROVISIONING_PROFILE_SPECIFIER="${{ parameters.PROVISIONING_PROFILE_NAME }}" \
      DEVELOPMENT_TEAM="${{ parameters.TEAM_ID }}"
    
    xcodebuild -exportArchive \
      -archivePath ../build/YourAppName.xcarchive \
      -exportOptionsPlist ../ExportOptions.plist \
      -exportPath ../build/
    
    echo "iOS app built successfully."
  displayName: 'Build iOS App'

- script: |
    # Build React Native app for Android
    echo "Building Android app..."
    cd android && ./gradlew assembleRelease && cd ..
    
    APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
    echo "Android APK built successfully at $APK_PATH."
  displayName: 'Build Android App'

- script: |
    # Upload iOS IPA to TestFlight
    IPA_PATH=$(find build -name "*.ipa" | head -n 1)
    
    if [ -f "$IPA_PATH" ]; then
        xcrun altool --upload-app -f "$IPA_PATH" -t ios -u "${{ parameters.APPLE_ID }}" -p "${{ parameters.APP_SPECIFIC_PASSWORD }}"
        echo "Uploaded iOS IPA to TestFlight."
    else
        echo "IPA file not found. Skipping upload."
        exit 1
    fi

    # Upload Android APK to Google Play (requires Fastlane setup)
    APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
    
    if [ -f "$APK_PATH" ]; then
        fastlane supply --apk "$APK_PATH" --track beta --json_key ./path/to/your-service-account.json --package_name your.package.name
        echo "Uploaded Android APK to Google Play Beta."
    else
        echo "APK file not found. Skipping upload."
        exit 1
    fi
  displayName: 'Upload Apps to Stores'

- script: |
    # Cleanup temporary files or keychains if necessary (iOS-specific)
    TEMP_KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
    
    if [ -f "$TEMP_KEYCHAIN_PATH" ]; then
        security delete-keychain "$TEMP_KEYCHAIN_PATH"
        echo "Temporary keychain deleted successfully."
    else
        echo "Temporary keychain not found. Skipping deletion."
    fi
    
    # Cleanup build directories for both platforms
    rm -rf build android/app/build ios/build ios/Pods ios/Podfile.lock
    
    echo "Cleanup completed."
  displayName: 'Cleanup Temporary Files'
