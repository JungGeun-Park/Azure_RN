trigger:
- main

pool:
  name: APPSEALING

parameters:
- name: APPLE_ID
  type: string
  default: 'puzznic@inka.co.kr'
- name: APP_SPECIFIC_PASSWORD
  type: string
  default: 'qbrz-hmfz-robj-eohm'
- name: TEAM_ID
  type: string
  default: '22X77ENQ2H'
- name: PROVISIONING_PROFILE_NAME
  type: string
  default: 'AppSealing Wildcard Distribution Profile'

steps:
  - script: |
      # Define paths for provisioning profile and keychain setup
      P12_CERT_PATH="$(Build.SourcesDirectory)/ios/distribution.p12"
      PROVISIONING_PROFILE_PATH="$(Build.SourcesDirectory)/ios/profile.mobileprovision"
      KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
      KEYCHAIN_PASSWORD="temp123"

      # Create a temporary keychain for code signing
      if security list-keychains | grep -q "temp-keychain.keychain-db"; then
          echo "Deleting existing temporary keychain..."
          security delete-keychain "$KEYCHAIN_PATH"
      fi

      echo "Creating temporary keychain..."
      security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

      echo "Setting temporary keychain as default..."
      security list-keychains -d user -s "$KEYCHAIN_PATH"
      security default-keychain -s "$KEYCHAIN_PATH"
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
      security set-keychain-settings -lut 3600 "$KEYCHAIN_PATH"

      echo "Importing distribution certificate (PKCS#12) into temporary keychain..."
      security import "$P12_CERT_PATH" -k "$KEYCHAIN_PATH" -P "123456" -T /usr/bin/codesign
      security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
    displayName: 'Setup Temporary Keychain and Install Certificate'

  - task: UseNode@1
    inputs:
      version: '18.x'
    displayName: 'Install Node.js'

  - script: |
      echo "Installing JS dependencies..."
      yarn install --frozen-lockfile
    displayName: 'Install Node Modules'

    - script: |
      echo "🔧 Safely modifying Hermes podspec (disabling macOS-incompatible block)"

      PODSPEC_PATH="node_modules/react-native/sdks/hermes-engine/hermes-engine.podspec"
      BACKUP_PATH="$PODSPEC_PATH.bak"

      cp "$PODSPEC_PATH" "$BACKUP_PATH"

      ruby -e "
        path = '$PODSPEC_PATH'
        content = File.read(path)

        # Disable tarball download block
        content.gsub!(
          /^(\s*)if source_type == HermesEngineSourceType::DOWNLOAD_PREBUILD_RELEASE_TARBALL.*?^(\s*)end\s*$/m
        ) do |block|
          match = block.match(/^(\s*)/)
          indent = match ? match[1] : ''
          disabled = block.lines.map { |l| indent + '# ' + l.strip }.join(\"\\n\")
          \"#{indent}if false # Disabled by CI patch\\n#{disabled}\\n#{indent}end\"
        end

        File.write(path, content)
        puts '✅ hermes-engine.podspec modification completed'
      "

      echo "🧪 Checking Ruby syntax for podspec"
      ruby -c "$PODSPEC_PATH"
    displayName: '[Hermes] Modify Podspec'

  - script: |
      echo "Installing dependencies..."
      brew install cocoapods
      gem pristine ffi --version 1.16.3
      cd ios
      pod install
    displayName: 'Install CocoaPods'

  - script: |
      # Automatically detect the app name from the iOS directory
      IOS_PATH="ios"
      if [ -d "$IOS_PATH" ]; then
          APP_NAME=$(ls "$IOS_PATH" | grep ".xcodeproj" | sed 's/.xcodeproj//')
          if [ -z "$APP_NAME" ]; then
              echo "No Xcode project found in the iOS directory."
              exit 1
          fi
      else
          echo "iOS directory not found."
          exit 1
      fi

      echo "Detected app name: $APP_NAME"
      echo "##vso[task.setvariable variable=APP_NAME]$APP_NAME"
    displayName: 'Detect App Name'

  - script: |
      # Automatically detect React Native iOS app name
      if [ -d "ios" ]; then
          APP_NAME=$(ls ios | grep ".xcodeproj" | sed 's/.xcodeproj//')
          if [ -z "$APP_NAME" ]; then
              echo "##vso[task.logissue type=error] Xcode project not found in iOS directory"
              exit 1
          fi
          echo "Detected app name: $APP_NAME"
      else
          echo "##vso[task.logissue type=error] iOS directory not found. Verify React Native project"
          exit 1
      fi
      
      # Info.plist path
      INFO_PLIST_PATH="$(Build.SourcesDirectory)/ios/${APP_NAME}/Info.plist"
      echo "Info.plist verification path: $INFO_PLIST_PATH"

      # 1. Attempt direct extraction from Info.plist
      if [ -f "$INFO_PLIST_PATH" ]; then
          echo "Info.plist found. Extracting CFBundleIdentifier..."
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$INFO_PLIST_PATH" 2>/dev/null)
          
          # Fallback to Xcode build settings if variable detected or empty
          if [[ "$BUNDLE_ID" == *"$"* ]] || [ -z "$BUNDLE_ID" ]; then
              echo "Variable detected or empty value. Searching PRODUCT_BUNDLE_IDENTIFIER in Xcode build settings..."
              
              # Check for workspace file
              if [ -f "ios/${APP_NAME}.xcworkspace" ]; then
                  echo "Using workspace file: ios/${APP_NAME}.xcworkspace"
                  BUNDLE_ID=$(xcodebuild -showBuildSettings \
                              -workspace "ios/${APP_NAME}.xcworkspace" \
                              -scheme "${APP_NAME}" \
                              -configuration Release \
                              -sdk iphoneos 2>/dev/null |
                              grep -E '^\s*PRODUCT_BUNDLE_IDENTIFIER\s*=' |
                              awk -F '=' '{print $2}' |
                              sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
              else
                  echo "Using project file: ios/${APP_NAME}.xcodeproj"
                  BUNDLE_ID=$(xcodebuild -showBuildSettings \
                              -project "ios/${APP_NAME}.xcodeproj" \
                              -scheme "${APP_NAME}" \
                              -configuration Release \
                              -sdk iphoneos 2>/dev/null |
                              grep -E '^\s*PRODUCT_BUNDLE_IDENTIFIER\s*=' |
                              awk -F '=' '{print $2}' |
                              sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
              fi
          fi
      else
          # 2. Direct extraction from Xcode build settings if Info.plist missing
          echo "Info.plist not found. Extracting from Xcode build settings..."
          
          # Check for workspace file
          if [ -f "ios/${APP_NAME}.xcworkspace" ]; then
              echo "Using workspace file: ios/${APP_NAME}.xcworkspace"
              BUNDLE_ID=$(xcodebuild -showBuildSettings \
                          -workspace "ios/${APP_NAME}.xcworkspace" \
                          -scheme "${APP_NAME}" \
                          -configuration Release \
                          -sdk iphoneos 2>/dev/null |
                          grep -E '^\s*PRODUCT_BUNDLE_IDENTIFIER\s*=' |
                          awk -F '=' '{print $2}' |
                          sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          else
              echo "Using project file: ios/${APP_NAME}.xcodeproj"
              BUNDLE_ID=$(xcodebuild -showBuildSettings \
                          -project "ios/${APP_NAME}.xcodeproj" \
                          -scheme "${APP_NAME}" \
                          -configuration Release \
                          -sdk iphoneos 2>/dev/null |
                          grep -E '^\s*PRODUCT_BUNDLE_IDENTIFIER\s*=' |
                          awk -F '=' '{print $2}' |
                          sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          fi
      fi

      # 3. Fallback to pbxproj file if still not found
      if [ -z "$BUNDLE_ID" ]; then
          echo "Bundle ID not found in build settings. Searching pbxproj file..."
          PBXPROJ_PATH="ios/${APP_NAME}.xcodeproj/project.pbxproj"
          if [ -f "$PBXPROJ_PATH" ]; then
              BUNDLE_ID=$(grep -A 5 "PRODUCT_BUNDLE_IDENTIFIER" "$PBXPROJ_PATH" | 
                        grep -o '"[^"]*"' | 
                        head -1 | 
                        sed 's/"//g')
          fi
      fi

      # Final validation
      if [ -z "$BUNDLE_ID" ]; then
          echo "##vso[task.logissue type=error] Bundle identifier not found!"
          exit 1
      fi

      echo "Extracted BUNDLE_ID: $BUNDLE_ID"
      echo "##vso[task.setvariable variable=BUNDLE_ID]$BUNDLE_ID"
      echo "##vso[task.logissue type=warning] Extracted Bundle ID: $BUNDLE_ID"
    displayName: 'Extract Bundle ID from React Native iOS Project'

  - script: |
      echo "🔍 Starting ARM64 'hermes' file replacement..."

      # Define paths
      HERMES_ENGINE_PATH="ios/Pods/hermes-engine"
      APP_SEALING_SDK_PATH="ios/AppSealingSDK"
      SOURCE_HERMES_FILE="$APP_SEALING_SDK_PATH/hermes"

      # Step 1: Verify target folder
      if [ ! -d "$HERMES_ENGINE_PATH" ]; then
          echo "❌ The hermes-engine directory does not exist: $HERMES_ENGINE_PATH"
          exit 1
      fi
      echo "✅ Target folder verification completed: $HERMES_ENGINE_PATH"

      # Step 2: Verify source file
      if [ ! -f "$SOURCE_HERMES_FILE" ]; then
          echo "❌ 'hermes' binary not found in AppSealingSDK: $SOURCE_HERMES_FILE"
          exit 1
      fi

      SOURCE_SIZE=$(stat -f%z "$SOURCE_HERMES_FILE")
      SOURCE_ARCH=$(lipo -archs "$SOURCE_HERMES_FILE" 2>/dev/null || echo "Unknown")
      echo "✅ AppSealingSDK hermes file verified"
      echo "  Path: $SOURCE_HERMES_FILE"
      echo "  Size: ${SOURCE_SIZE} bytes"
      echo "  Arch: ${SOURCE_ARCH}"

      # Step 3: Validate arm64 architecture
      if ! echo "$SOURCE_ARCH" | grep -q "arm64"; then
          echo "##vso[task.logissue type=error] AppSealingSDK Hermes does not include arm64 architecture"
          exit 1
      fi

      # Step 4: Search for 'hermes' binaries in paths containing 'ios-arm64' and excluding 'x86_64'
      echo "🔍 Searching for hermes files in paths containing 'ios-arm64' and excluding 'x86_64'..."
      TARGET_HERMES_FILES=$(find "$HERMES_ENGINE_PATH" -type f -name "hermes" | grep "ios-arm64" | grep -v "x86_64")

      if [ -z "$TARGET_HERMES_FILES" ]; then
          echo "❌ No hermes files found satisfying the conditions (contains ios-arm64 & excludes x86_64)"
          exit 1
      fi

      # Step 5: Copy and verify
      for TARGET_FILE in $TARGET_HERMES_FILES; do
          echo "🔄 Replacing: $TARGET_FILE"
          cp -fv "$SOURCE_HERMES_FILE" "$TARGET_FILE"

          UPDATED_ARCH=$(lipo -archs "$TARGET_FILE" 2>/dev/null || echo "Unknown")
          if ! echo "$UPDATED_ARCH" | grep -q "arm64"; then
              echo "##vso[task.logissue type=error] Architecture verification failed: $TARGET_FILE"
              exit 1
          fi
      done

      echo "✅ All target 'hermes' files have been successfully replaced."

      # Final verification
      echo "🔍 Final verification:"
      for file in $TARGET_HERMES_FILES; do
          FILE_SIZE=$(stat -f%z "$file")
          ARCHITECTURES=$(lipo -archs "$file" 2>/dev/null || echo "Unknown")
          echo "  Path: $file"
          echo "  Size: ${FILE_SIZE} bytes"
          echo "  Arch: ${ARCHITECTURES}"
      done
    displayName: 'Replace Hermes Files'

  - script: |
      echo "Cleaning and building..."
      cd ios
      xcodebuild clean archive \
        -workspace "${APP_NAME}.xcworkspace" \
        -scheme "${APP_NAME}" \
        -sdk iphoneos \
        -configuration Release \
        clean archive \
        CODE_SIGN_IDENTITY="Apple Distribution" \
        CODE_SIGN_STYLE="Manual" \
        CODE_SIGN_IDENTITY="Apple Distribution" \
        DEVELOPMENT_TEAM="${{ parameters.TEAM_ID }}" \
        PROVISIONING_PROFILE_SPECIFIER="${{ parameters.PROVISIONING_PROFILE_NAME }}" \
        SWIFT_OBJC_BRIDGING_HEADER="Azure_RN078-Bridging-Header.h" \
        -archivePath "$(Build.ArtifactStagingDirectory)/${APP_NAME}.xcarchive"
    displayName: 'Archive iOS App'

  - script: |
      EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
      mkdir -p "$EXPORT_DIR"
      
      cat << EOF > "$EXPORT_DIR/ExportOptions.plist"
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <dict>
          <key>method</key>
          <string>app-store</string>
          <key>teamID</key>
          <string>${{ parameters.TEAM_ID }}</string>
          <key>provisioningProfiles</key>
          <dict>
              <key>$BUNDLE_ID</key>
              <string>${{ parameters.PROVISIONING_PROFILE_NAME }}</string>
          </dict>
      </dict>
      </plist>
      EOF
      
      echo "ExportOptions.plist created with provisioningProfiles and bundle ID."
      cat "$EXPORT_DIR/ExportOptions.plist"  # Output the created plist content for debugging

    displayName: 'Generate ExportOptions.plist'

  - script: |
      EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
      ARCHIVE_PATH="$EXPORT_DIR/${APP_NAME}.xcarchive"

      echo "Exporting .ipa..."
      xcodebuild -exportArchive \
        -archivePath "$ARCHIVE_PATH" \
        -exportOptionsPlist "$EXPORT_DIR/ExportOptions.plist" \
        -exportPath "$EXPORT_DIR"

    displayName: 'Export IPA'

  - script: |
      # Grant execution permission to generate_hash script
      HASH_SCRIPT_PATH="$(Build.SourcesDirectory)/ios/AppSealingSDK/generate_hash"
      IPA_PATH=$(find "$EXPORT_DIR" -type f -name "*.ipa" | head -n 1)

      echo "Granting execution permission to generate_hash..."
      chmod +x "$HASH_SCRIPT_PATH"

      echo "Running generate_hash with IPA... $IPA_PATH"
      "$HASH_SCRIPT_PATH" "$IPA_PATH"
    displayName: 'Run generate_hash on IPA'

  - script: |
      # Upload the IPA file to TestFlight using altool
      IPA_PATH=$(find "$(Build.ArtifactStagingDirectory)" -type f -name "*.ipa" | head -n 1)

      if [ -f "$IPA_PATH" ]; then
          xcrun altool --upload-app \
            -f "$IPA_PATH" \
            -t ios \
            -u "${{ parameters.APPLE_ID }}" \
            -p "${{ parameters.APP_SPECIFIC_PASSWORD }}"

          echo "Uploaded IPA to TestFlight successfully."
      else
          echo "IPA file not found. Skipping upload."
          exit 1
      fi
    displayName: 'Upload to TestFlight'

  - script: |
      # Cleanup temporary keychain and build artifacts
      TEMP_KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"

      if [ -f "$TEMP_KEYCHAIN_PATH" ]; then
          security delete-keychain "$TEMP_KEYCHAIN_PATH"
          echo "Temporary keychain deleted successfully."
      else
          echo "Temporary keychain not found. Skipping deletion."
      fi

      rm -rf "$(Build.ArtifactStagingDirectory)" ios/build ios/Pods ios/Podfile.lock

      echo "Cleanup completed."
    displayName: 'Cleanup Temporary Files'



