trigger:
- main

pool:
  name: APPSEALING

parameters:
- name: APPLE_ID
  type: string
  default: 'puzznic@inka.co.kr'
- name: APP_SPECIFIC_PASSWORD
  type: string
  default: 'qbrz-hmfz-robj-eohm'
- name: TEAM_ID
  type: string
  default: '22X77ENQ2H'
- name: PROVISIONING_PROFILE_NAME
  type: string
  default: 'AppSealing Wildcard Distribution Profile'

steps:
- script: |
    # Automatically detect the app name from the iOS directory
    IOS_PATH="ios"
    if [ -d "$IOS_PATH" ]; then
        APP_NAME=$(ls "$IOS_PATH" | grep ".xcodeproj" | sed 's/.xcodeproj//')
        if [ -z "$APP_NAME" ]; then
            echo "No Xcode project found in the iOS directory."
            exit 1
        fi
    else
        echo "iOS directory not found."
        exit 1
    fi

    echo "Detected app name: $APP_NAME"
    echo "##vso[task.setvariable variable=APP_NAME]$APP_NAME"
  displayName: 'Detect App Name'

- script: |
    # Define paths for provisioning profile and keychain setup
    P12_CERT_PATH="$(Build.SourcesDirectory)/ios/distribution.p12"
    PROVISIONING_PROFILE_PATH="$(Build.SourcesDirectory)/ios/profile.mobileprovision"
    KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
    KEYCHAIN_PASSWORD="temp123"

    # Create a temporary keychain for code signing
    if security list-keychains | grep -q "temp-keychain.keychain-db"; then
        echo "Deleting existing temporary keychain..."
        security delete-keychain "$KEYCHAIN_PATH"
    fi

    echo "Creating temporary keychain..."
    security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

    echo "Setting temporary keychain as default..."
    security list-keychains -d user -s "$KEYCHAIN_PATH"
    security default-keychain -s "$KEYCHAIN_PATH"
    security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
    security set-keychain-settings -lut 3600 "$KEYCHAIN_PATH"

    echo "Importing distribution certificate (PKCS#12) into temporary keychain..."
    security import "$P12_CERT_PATH" -k "$KEYCHAIN_PATH" -P "123456" -T /usr/bin/codesign
    security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
  displayName: 'Setup Temporary Keychain and Install Certificate'

- task: NodeTool@0
  inputs:
    versionSpec: '18.x'  # React Native와 호환되는 안정적인 버전 사용
  displayName: 'Install Node.js'

- script: |
    echo "Removing existing node_modules..."
    rm -rf node_modules
    rm -f package-lock.json

    echo "Reinstalling Node modules..."
    npm install --legacy-peer-deps

    echo "Verifying React Native scripts..."
    if [ -f "node_modules/react-native/scripts/react_native_pods.rb" ]; then
      echo "✅ React Native scripts found!"
    else
      echo "❌ React Native scripts missing! Attempting to restore..."
      npm audit fix --force
    fi
  displayName: 'Reinstall Node Modules'

- script: |
    export GEM_HOME=$HOME/.gem
    export PATH=$GEM_HOME/bin:$PATH
    
    echo "Installing CocoaPods..."
    gem install cocoapods --user-install
    
    echo "CocoaPods version:"
    export PATH=$HOME/.gem/ruby/*/bin:$PATH
    which pod || echo "Pod not found in PATH"
    pod --version || echo "Pod command not available"
  displayName: 'Install CocoaPods'

- script: |
    # First, detect the app name correctly
    APP_NAME=$(ls ios | grep ".xcodeproj" | sed 's/.xcodeproj//')
    echo "Detected app name: $APP_NAME"
    
    # Create Podfile with proper variable substitution
    cat > ios/Podfile << EOF
    require_relative '../node_modules/react-native/scripts/react_native_pods'
    require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
    
    platform :ios, min_ios_version_supported
    prepare_react_native_project!
    
    target '$APP_NAME' do
      config = use_native_modules!
      use_react_native!(
        :path => config[:reactNativePath],
        :app_path => "#{Pod::Config.instance.installation_root}/.."
      )
    end
    
    post_install do |installer|
      react_native_post_install(installer)
    end
    EOF
    
    # Now run pod install with correct PATH
    cd ios
    export GEM_HOME=$HOME/.gem
    export PATH=$GEM_HOME/ruby/2.6.0/bin:$PATH
    pod install --repo-update
  displayName: 'Fix Podfile and Install Pods'

- script: |
    # React Native iOS 앱 이름 자동 감지
    if [ -d "ios" ]; then
        APP_NAME=$(ls ios | grep ".xcodeproj" | sed 's/.xcodeproj//')
        if [ -z "$APP_NAME" ]; then
            echo "##vso[task.logissue type=error] iOS 디렉토리에서 Xcode 프로젝트를 찾을 수 없습니다."
            exit 1
        fi
        echo "감지된 앱 이름: $APP_NAME"
    else
        echo "##vso[task.logissue type=error] iOS 디렉토리를 찾을 수 없습니다. React Native 프로젝트인지 확인하세요."
        exit 1
    fi
    
    # Info.plist 경로
    INFO_PLIST_PATH="$(Build.SourcesDirectory)/ios/${APP_NAME}/Info.plist"
    echo "Info.plist 확인 경로: $INFO_PLIST_PATH"

    # 1. Info.plist에서 직접 추출 시도
    if [ -f "$INFO_PLIST_PATH" ]; then
        echo "Info.plist 발견. CFBundleIdentifier 추출 중..."
        BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$INFO_PLIST_PATH" 2>/dev/null)
        
        # 변수 값이 포함되어 있거나 빈 값인 경우 Xcode 빌드 설정에서 추출
        if [[ "$BUNDLE_ID" == *"$"* ]] || [ -z "$BUNDLE_ID" ]; then
            echo "변수 감지 또는 빈 값. Xcode 빌드 설정에서 PRODUCT_BUNDLE_IDENTIFIER 검색..."
            
            # 워크스페이스 파일 확인
            if [ -f "ios/${APP_NAME}.xcworkspace" ]; then
                echo "워크스페이스 파일 사용: ios/${APP_NAME}.xcworkspace"
                BUNDLE_ID=$(xcodebuild -showBuildSettings \
                            -workspace "ios/${APP_NAME}.xcworkspace" \
                            -scheme "${APP_NAME}" \
                            -configuration Release \
                            -sdk iphoneos 2>/dev/null |
                            grep -E '^\s*PRODUCT_BUNDLE_IDENTIFIER\s*=' |
                            awk -F '=' '{print $2}' |
                            sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            else
                echo "프로젝트 파일 사용: ios/${APP_NAME}.xcodeproj"
                BUNDLE_ID=$(xcodebuild -showBuildSettings \
                            -project "ios/${APP_NAME}.xcodeproj" \
                            -scheme "${APP_NAME}" \
                            -configuration Release \
                            -sdk iphoneos 2>/dev/null |
                            grep -E '^\s*PRODUCT_BUNDLE_IDENTIFIER\s*=' |
                            awk -F '=' '{print $2}' |
                            sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            fi
        fi
    else
        # 2. Info.plist 없을 경우 Xcode 빌드 설정에서 직접 추출
        echo "Info.plist 없음. Xcode 빌드 설정에서 추출..."
        
        # 워크스페이스 파일 확인
        if [ -f "ios/${APP_NAME}.xcworkspace" ]; then
            echo "워크스페이스 파일 사용: ios/${APP_NAME}.xcworkspace"
            BUNDLE_ID=$(xcodebuild -showBuildSettings \
                        -workspace "ios/${APP_NAME}.xcworkspace" \
                        -scheme "${APP_NAME}" \
                        -configuration Release \
                        -sdk iphoneos 2>/dev/null |
                        grep -E '^\s*PRODUCT_BUNDLE_IDENTIFIER\s*=' |
                        awk -F '=' '{print $2}' |
                        sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        else
            echo "프로젝트 파일 사용: ios/${APP_NAME}.xcodeproj"
            BUNDLE_ID=$(xcodebuild -showBuildSettings \
                        -project "ios/${APP_NAME}.xcodeproj" \
                        -scheme "${APP_NAME}" \
                        -configuration Release \
                        -sdk iphoneos 2>/dev/null |
                        grep -E '^\s*PRODUCT_BUNDLE_IDENTIFIER\s*=' |
                        awk -F '=' '{print $2}' |
                        sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        fi
    fi

    # 3. 여전히 번들 ID를 찾지 못한 경우 pbxproj 파일에서 직접 검색
    if [ -z "$BUNDLE_ID" ]; then
        echo "빌드 설정에서 번들 ID를 찾지 못했습니다. pbxproj 파일에서 검색..."
        PBXPROJ_PATH="ios/${APP_NAME}.xcodeproj/project.pbxproj"
        if [ -f "$PBXPROJ_PATH" ]; then
            BUNDLE_ID=$(grep -A 5 "PRODUCT_BUNDLE_IDENTIFIER" "$PBXPROJ_PATH" | 
                       grep -o '"[^"]*"' | 
                       head -1 | 
                       sed 's/"//g')
        fi
    fi

    # 최종 검증
    if [ -z "$BUNDLE_ID" ]; then
        echo "##vso[task.logissue type=error] 번들 식별자를 찾을 수 없습니다!"
        exit 1
    fi

    echo "추출된 BUNDLE_ID: $BUNDLE_ID"
    echo "##vso[task.setvariable variable=BUNDLE_ID]$BUNDLE_ID"
    echo "##vso[task.logissue type=warning] 추출된 Bundle ID: $BUNDLE_ID"
  displayName: 'Extract Bundle ID from React Native iOS Project'

- script: |
    EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
    mkdir -p "$EXPORT_DIR"
    
    cat << EOF > "$EXPORT_DIR/ExportOptions.plist"
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>method</key>
        <string>app-store</string>
        <key>teamID</key>
        <string>${{ parameters.TEAM_ID }}</string>
        <key>provisioningProfiles</key>
        <dict>
            <key>$BUNDLE_ID</key>
            <string>${{ parameters.PROVISIONING_PROFILE_NAME }}</string>
        </dict>
    </dict>
    </plist>
    EOF
    
    echo "ExportOptions.plist created with provisioningProfiles and bundle ID."
    cat "$EXPORT_DIR/ExportOptions.plist"  # Output the created plist content for debugging

  displayName: 'Generate ExportOptions.plist'

- script: |
    echo "Creating Bridging Header..."
    cat > ios/Azure_RN078-Bridging-Header.h << 'EOF'
    #import <React/RCTBridgeModule.h>
    #import <React/RCTBridge.h>
    #import <React/RCTEventDispatcher.h>
    #import <React/RCTRootView.h>
    #import <React/RCTUtils.h>
    #import <React/RCTConvert.h>
    #import <React/RCTBundleURLProvider.h>
    EOF
    
    echo "Updating project file with sed instead of plutil..."
    cd ios
    sed -i '' 's|SWIFT_OBJC_BRIDGING_HEADER = .*;|SWIFT_OBJC_BRIDGING_HEADER = "Azure_RN078-Bridging-Header.h";|g' Azure_RN078.xcodeproj/project.pbxproj || echo "Sed command failed, will use direct reference in build command instead"
    cd ..
  displayName: 'Setup Bridging Header with sed'

- script: |
    # AppSealingSDK의 Hermes 파일을 Pods 디렉토리로 복사
    echo "Hermes 파일 교체 작업 시작..."

    # 소스 디렉토리 설정
    APP_SEALING_SDK_DIR="$(Build.SourcesDirectory)/ios/AppSealingSDK"
    HERMES_SOURCE_FILES=$(find "$APP_SEALING_SDK_DIR" -name "*hermes*" -type f 2>/dev/null)

    # 대상 디렉토리 구조
    HERMES_DEST_DIR="$(Build.SourcesDirectory)/ios/Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework"

    # 대상 디렉토리 존재 확인
    if [ ! -d "$HERMES_DEST_DIR" ]; then
      echo "❌ 대상 디렉토리 없음: $HERMES_DEST_DIR"
      exit 1
    fi

    # tvOS, xros, x86_64 제외하고 Hermes 파일 검색
    EXISTING_HERMES_FILES=$(find "$HERMES_DEST_DIR" -type f -name "*hermes*" \
      ! -path "*tvos*" \
      ! -path "*xros*" \
      ! -path "*x86_64*" 2>/dev/null)

    if [ -n "$EXISTING_HERMES_FILES" ]; then
      echo "🔍 발견된 Hermes 파일:"
      for TARGET_FILE in $EXISTING_HERMES_FILES; do
        FILENAME=$(basename "$TARGET_FILE")
        SOURCE_FILE=$(find "$APP_SEALING_SDK_DIR" -name "$FILENAME" -type f 2>/dev/null)
        
        if [ -n "$SOURCE_FILE" ]; then
          echo "🔄 교체 중: $TARGET_FILE"
          cp -f "$SOURCE_FILE" "$TARGET_FILE" || echo "⚠️  파일 교체 실패: $FILENAME"
        else
          echo "⏩ 소스 파일 없음: $FILENAME"
        fi
      done
      echo "✅ Hermes 파일 교체 완료!"
    else
      echo "⚠️  대상 디렉토리에 Hermes 파일이 존재하지 않음"
    fi
  displayName: 'Copy Hermes Files from AppSealingSDK'
  
- script: |
    EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
    ARCHIVE_PATH="$EXPORT_DIR/${APP_NAME}.xcarchive"
    
    # 1. .xcworkspace 존재 확인
    WORKSPACE_PATH="$(Build.SourcesDirectory)/ios/${APP_NAME}.xcworkspace"
    if [ ! -d "$WORKSPACE_PATH" ]; then
        echo "##vso[task.logissue type=error] .xcworkspace not found: $WORKSPACE_PATH"
        exit 1
    fi

    # 저장된 Hermes 경로 가져오기
    APP_SEALING_SDK_DIR="$(Build.SourcesDirectory)/ios/AppSealingSDK"
    HERMES_DEST_DIR="$(Build.SourcesDirectory)/ios/Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework"

    # tvOS, xros, x86-64 제외하고 Hermes 파일 검색
    EXISTING_HERMES_FILES=$(find "$HERMES_DEST_DIR" -type f -name "*hermes*" ! -path "*tvos*" ! -path "*xros*" ! -path "*x86-64*" 2>/dev/null)

    if [ -z "$EXISTING_HERMES_FILES" ]; then
      echo "❌ Hermes 파일을 찾을 수 없습니다. 검증 실패!"
      exit 1
    fi

    VERIFICATION_FAILED=0

    for TARGET_FILE in $EXISTING_HERMES_FILES; do
      FILENAME=$(basename "$TARGET_FILE")
      SOURCE_FILE=$(find "$APP_SEALING_SDK_DIR" -name "$FILENAME" -type f 2>/dev/null)

      if [[ -z "$SOURCE_FILE" ]]; then
        echo "❌ 소스 파일 누락: $FILENAME"
        VERIFICATION_FAILED=1
        continue
      fi

      # 검증: 파일 내용 비교 및 크기 출력
      TARGET_SIZE=$(stat -f%z "$TARGET_FILE")
      SOURCE_SIZE=$(stat -f%z "$SOURCE_FILE")

      if cmp -s "$SOURCE_FILE" "$TARGET_FILE"; then
        echo "✅ 검증 성공: $FILENAME"
        echo "  소스 파일 크기: ${SOURCE_SIZE} 바이트"
        echo "  대상 파일 크기: ${TARGET_SIZE} 바이트"
      else
        echo "❌ 검증 실패: $FILENAME (파일 내용 불일치)"
        echo "  소스 파일 크기: ${SOURCE_SIZE} 바이트"
        echo "  대상 파일 크기: ${TARGET_SIZE} 바이트"
        VERIFICATION_FAILED=1
      fi
    done

    if [ $VERIFICATION_FAILED -ne 0 ]; then
      echo "❌ Hermes 파일 검증 실패. 빌드를 중단합니다."
      exit 1
    else
      echo "✅ 모든 Hermes 파일이 성공적으로 검증되었습니다."
    fi

    # 2. 아카이브 빌드
    cd ios
    xcodebuild clean archive \
          -workspace "${APP_NAME}.xcworkspace" \
          -scheme "${APP_NAME}" \
          -sdk iphoneos \
          -configuration Release \
          clean archive \
          CODE_SIGN_IDENTITY="Apple Distribution" \
          CODE_SIGN_STYLE="Manual" \
          CODE_SIGN_IDENTITY="Apple Distribution" \
          DEVELOPMENT_TEAM="${{ parameters.TEAM_ID }}" \
          PROVISIONING_PROFILE_SPECIFIER="${{ parameters.PROVISIONING_PROFILE_NAME }}" \
          SWIFT_OBJC_BRIDGING_HEADER="Azure_RN078-Bridging-Header.h" \
          -archivePath "$(Build.ArtifactStagingDirectory)/${APP_NAME}.xcarchive"

    # 3. IPA 내보내기
    xcodebuild -exportArchive \
      -archivePath "$ARCHIVE_PATH" \
      -exportOptionsPlist "$EXPORT_DIR/ExportOptions.plist" \
      -exportPath "$EXPORT_DIR"
    
    echo "IPA exported to: $EXPORT_DIR"
  displayName: 'Build and Export IPA'

- script: |
    # Grant execution permission to generate_hash script
    HASH_SCRIPT_PATH="$(Build.SourcesDirectory)/ios/AppSealingSDK/generate_hash"
    echo "-------------------------------------"
    cd "$(Build.SourcesDirectory)/ios/AppSealingSDK"
    ls -al
    echo "-------------------------------------"
    EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
    cd "$EXPORT_DIR"
    ls -al
    echo "-------------------------------------"
    IPA_PATH=$(find "$EXPORT_DIR" -type f -name "*.ipa" | head -n 1)

    echo "Granting execution permission to generate_hash..."
    chmod +x "$HASH_SCRIPT_PATH"

    echo "Running generate_hash with IPA... $IPA_PATH"
    "$HASH_SCRIPT_PATH" "$IPA_PATH"
  displayName: 'Run generate_hash on IPA'

- script: |
    # Upload the IPA file to TestFlight using altool
    IPA_PATH=$(find "$(Build.ArtifactStagingDirectory)" -type f -name "*.ipa" | head -n 1)

    if [ -f "$IPA_PATH" ]; then
        xcrun altool --upload-app \
          -f "$IPA_PATH" \
          -t ios \
          -u "${{ parameters.APPLE_ID }}" \
          -p "${{ parameters.APP_SPECIFIC_PASSWORD }}"

        echo "Uploaded IPA to TestFlight successfully."
    else
        echo "IPA file not found. Skipping upload."
        exit 1
    fi
  displayName: 'Upload to TestFlight'

- script: |
    # Cleanup temporary keychain and build artifacts
    TEMP_KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"

    if [ -f "$TEMP_KEYCHAIN_PATH" ]; then
        security delete-keychain "$TEMP_KEYCHAIN_PATH"
        echo "Temporary keychain deleted successfully."
    else
        echo "Temporary keychain not found. Skipping deletion."
    fi

    rm -rf "$(Build.ArtifactStagingDirectory)" ios/build ios/Pods ios/Podfile.lock

    echo "Cleanup completed."
  displayName: 'Cleanup Temporary Files'
