trigger:
- develop

pool:
  name: APPSEALING

parameters:
- name: APPLE_ID
  type: string
  default: 'puzznic@inka.co.kr'
- name: APP_SPECIFIC_PASSWORD
  type: string
  default: 'qbrz-hmfz-robj-eohm'
- name: TEAM_ID
  type: string
  default: '22X77ENQ2H'
- name: PROVISIONING_PROFILE_NAME
  type: string
  default: 'AppSealing Wildcard Distribution Profile'

steps:
# - script: |
#     # Check if Node.js and npm are installed, if not, install them
#     if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
#         echo "Node.js or npm is not installed. Installing Node.js..."
#         brew install node
#     else
#         echo "Node.js and npm are already installed."
#     fi

#     # Install dependencies for React Native project
#     echo "Installing project dependencies..."
#     npm install

#     # Install CocoaPods for iOS dependencies
#     echo "Installing CocoaPods..."
#     cd ios && pod install && cd ..
#   displayName: 'Setup React Native Environment'

- script: |
    # Define paths for provisioning profile and keychain setup
    P12_CERT_PATH="$(Build.SourcesDirectory)/ios/distribution.p12"
    PROVISIONING_PROFILE_PATH="$(Build.SourcesDirectory)/ios/profile.mobileprovision"
    KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
    KEYCHAIN_PASSWORD="temp123"

    # Create a temporary keychain for code signing
    if security list-keychains | grep -q "temp-keychain.keychain-db"; then
        echo "Deleting existing temporary keychain..."
        security delete-keychain "$KEYCHAIN_PATH"
    fi

    echo "Creating temporary keychain..."
    security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

    echo "Setting temporary keychain as default..."
    security list-keychains -d user -s "$KEYCHAIN_PATH"
    security default-keychain -s "$KEYCHAIN_PATH"
    security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
    security set-keychain-settings -lut 3600 "$KEYCHAIN_PATH"

    echo "Importing distribution certificate (PKCS#12) into temporary keychain..."
    security import "$P12_CERT_PATH" -k "$KEYCHAIN_PATH" -P "123456" -T /usr/bin/codesign
    security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
  displayName: 'Setup Temporary Keychain and Install Certificate'

- script: |
    # Increment build number for iOS (Info.plist)
    INFO_PLIST_PATH="ios/YourAppName/Info.plist"
    
    if [ -f "$INFO_PLIST_PATH" ]; then
        CURRENT_BUILD_NUMBER=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$INFO_PLIST_PATH")
        NEW_BUILD_NUMBER=$((CURRENT_BUILD_NUMBER + 1))
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD_NUMBER" "$INFO_PLIST_PATH"
        echo "Updated iOS build number to $NEW_BUILD_NUMBER."
    else
        echo "Info.plist not found. Skipping iOS build number update."
        exit 1
    fi

    # Ensure minimum deployment target is set in Info.plist
    /usr/libexec/PlistBuddy -c "Set :IPHONEOS_DEPLOYMENT_TARGET 12.0" "$INFO_PLIST_PATH"
  displayName: 'Increment Build Number and Set Deployment Target'

- script: |
    # Build the React Native iOS app using Xcode commands
    EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
    IPA_PATH="$EXPORT_DIR/YourAppName.ipa"
    ARCHIVE_PATH="$EXPORT_DIR/YourAppName.xcarchive"
    
    xcodebuild clean archive \
      -workspace ios/YourAppName.xcworkspace \
      -scheme YourAppName \
      -sdk iphoneos \
      -configuration Release \
      CODE_SIGN_IDENTITY="Apple Distribution" \
      DEVELOPMENT_TEAM="${{ parameters.TEAM_ID }}" \
      PROVISIONING_PROFILE_SPECIFIER="${{ parameters.PROVISIONING_PROFILE_NAME }}" \
      -archivePath "$ARCHIVE_PATH"

    xcodebuild -exportArchive \
      -archivePath "$ARCHIVE_PATH" \
      -exportOptionsPlist "$(Build.SourcesDirectory)/ios/ExportOptions.plist" \
      -exportPath "$EXPORT_DIR"

    echo "IPA successfully exported at $IPA_PATH."
  displayName: 'Build and Export IPA'

- script: |
    # Upload the IPA file to TestFlight using altool
    IPA_PATH=$(find "$(Build.ArtifactStagingDirectory)" -type f -name "*.ipa" | head -n 1)
    
    if [ -f "$IPA_PATH" ]; then
        xcrun altool --upload-app \
          -f "$IPA_PATH" \
          -t ios \
          -u "${{ parameters.APPLE_ID }}" \
          -p "${{ parameters.APP_SPECIFIC_PASSWORD }}"
        
        echo "Uploaded IPA to TestFlight successfully."
    else
        echo "IPA file not found. Skipping upload."
        exit 1
    fi
  displayName: 'Upload to TestFlight'

- script: |
    # Cleanup temporary keychain and build artifacts
    TEMP_KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
    
    if [ -f "$TEMP_KEYCHAIN_PATH" ]; then
        security delete-keychain "$TEMP_KEYCHAIN_PATH"
        echo "Temporary keychain deleted successfully."
    else
        echo "Temporary keychain not found. Skipping deletion."
    fi
    
    rm -rf "$(Build.ArtifactStagingDirectory)" ios/build ios/Pods ios/Podfile.lock
    
    echo "Cleanup completed."
  displayName: 'Cleanup Temporary Files'