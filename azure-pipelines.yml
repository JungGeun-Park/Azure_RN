trigger:
- develop

pool:
  name: APPSEALING

parameters:
- name: APPLE_ID
  type: string
  default: 'puzznic@inka.co.kr'
- name: APP_SPECIFIC_PASSWORD
  type: string
  default: 'qbrz-hmfz-robj-eohm'
- name: TEAM_ID
  type: string
  default: '22X77ENQ2H'
- name: PROVISIONING_PROFILE_NAME
  type: string
  default: 'AppSealing Wildcard Distribution Profile'

steps:
- script: |
    # Automatically detect the app name from the iOS directory
    IOS_PATH="ios"
    if [ -d "$IOS_PATH" ]; then
        APP_NAME=$(ls "$IOS_PATH" | grep ".xcodeproj" | sed 's/.xcodeproj//')
        if [ -z "$APP_NAME" ]; then
            echo "No Xcode project found in the iOS directory."
            exit 1
        fi
    else
        echo "iOS directory not found."
        exit 1
    fi

    echo "Detected app name: $APP_NAME"
    echo "##vso[task.setvariable variable=APP_NAME]$APP_NAME"
  displayName: 'Detect App Name'

- script: |
    # Define paths for provisioning profile and keychain setup
    P12_CERT_PATH="$(Build.SourcesDirectory)/ios/distribution.p12"
    PROVISIONING_PROFILE_PATH="$(Build.SourcesDirectory)/ios/profile.mobileprovision"
    KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
    KEYCHAIN_PASSWORD="temp123"

    # Create a temporary keychain for code signing
    if security list-keychains | grep -q "temp-keychain.keychain-db"; then
        echo "Deleting existing temporary keychain..."
        security delete-keychain "$KEYCHAIN_PATH"
    fi

    echo "Creating temporary keychain..."
    security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

    echo "Setting temporary keychain as default..."
    security list-keychains -d user -s "$KEYCHAIN_PATH"
    security default-keychain -s "$KEYCHAIN_PATH"
    security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
    security set-keychain-settings -lut 3600 "$KEYCHAIN_PATH"

    echo "Importing distribution certificate (PKCS#12) into temporary keychain..."
    security import "$P12_CERT_PATH" -k "$KEYCHAIN_PATH" -P "123456" -T /usr/bin/codesign
    security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
  displayName: 'Setup Temporary Keychain and Install Certificate'

- script: |
    # Increment build number for iOS (Info.plist)
    INFO_PLIST_PATH="ios/$APP_NAME/Info.plist"

    if [ -f "$INFO_PLIST_PATH" ]; then
        # 1. CFBundleVersion 변수화 문제 해결
        # 현재 값이 $(CURRENT_PROJECT_VERSION)인 경우 강제로 숫자 초기화
        CURRENT_BUILD_NUMBER=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$INFO_PLIST_PATH" 2>/dev/null || echo "1")
        if [[ "$CURRENT_BUILD_NUMBER" == *"$("* ]]; then
            echo "Resetting invalid build number format..."
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion 1" "$INFO_PLIST_PATH"
            CURRENT_BUILD_NUMBER=1
        fi

        # 2. 빌드 번호 증가
        NEW_BUILD_NUMBER=$((CURRENT_BUILD_NUMBER + 1))
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD_NUMBER" "$INFO_PLIST_PATH"
        echo "Updated iOS build number to $NEW_BUILD_NUMBER."

        # 3. IPHONEOS_DEPLOYMENT_TARGET 처리
        # 키가 없는 경우 추가 후 설정
        /usr/libexec/PlistBuddy -c "Add :IPHONEOS_DEPLOYMENT_TARGET string 12.0" "$INFO_PLIST_PATH" 2>/dev/null || true
        /usr/libexec/PlistBuddy -c "Set :IPHONEOS_DEPLOYMENT_TARGET 12.0" "$INFO_PLIST_PATH"
        echo "Set deployment target to iOS 12.0."
    else
        echo "##vso[task.logissue type=error] Info.plist not found at $INFO_PLIST_PATH"
        exit 1
    fi
  displayName: 'Increment Build Number and Set Deployment Target'

- script: |
    # Build the React Native iOS app using Xcode commands
    EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
    IPA_PATH="$EXPORT_DIR/$APP_NAME.ipa"
    ARCHIVE_PATH="$EXPORT_DIR/$APP_NAME.xcarchive"

    xcodebuild clean archive \
      -workspace ios/$APP_NAME.xcworkspace \
      -scheme $APP_NAME \
      -sdk iphoneos \
      -configuration Release \
      CODE_SIGN_IDENTITY="Apple Distribution" \
      DEVELOPMENT_TEAM="${{ parameters.TEAM_ID }}" \
      PROVISIONING_PROFILE_SPECIFIER="${{ parameters.PROVISIONING_PROFILE_NAME }}" \
      -archivePath "$ARCHIVE_PATH"

    xcodebuild -exportArchive \
      -archivePath "$ARCHIVE_PATH" \
      -exportOptionsPlist "$(Build.SourcesDirectory)/ios/ExportOptions.plist" \
      -exportPath "$EXPORT_DIR"

    echo "IPA successfully exported at $IPA_PATH."
  displayName: 'Build and Export IPA'

- script: |
    # Upload the IPA file to TestFlight using altool
    IPA_PATH=$(find "$(Build.ArtifactStagingDirectory)" -type f -name "*.ipa" | head -n 1)

    if [ -f "$IPA_PATH" ]; then
        xcrun altool --upload-app \
          -f "$IPA_PATH" \
          -t ios \
          -u "${{ parameters.APPLE_ID }}" \
          -p "${{ parameters.APP_SPECIFIC_PASSWORD }}"

        echo "Uploaded IPA to TestFlight successfully."
    else
        echo "IPA file not found. Skipping upload."
        exit 1
    fi
  displayName: 'Upload to TestFlight'

- script: |
    # Cleanup temporary keychain and build artifacts
    TEMP_KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"

    if [ -f "$TEMP_KEYCHAIN_PATH" ]; then
        security delete-keychain "$TEMP_KEYCHAIN_PATH"
        echo "Temporary keychain deleted successfully."
    else
        echo "Temporary keychain not found. Skipping deletion."
    fi

    rm -rf "$(Build.ArtifactStagingDirectory)" ios/build ios/Pods ios/Podfile.lock

    echo "Cleanup completed."
  displayName: 'Cleanup Temporary Files'
